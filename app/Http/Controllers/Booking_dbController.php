<?php

namespace App\Http\Controllers;

use App\Http\Requests\UpdateBookingPaymentRequest;
use App\Models\Booking;
use App\Models\Status;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class Booking_dbController extends Controller
{
    public function moveToHistory($id)
    {
        try {
            $booking = Booking::findOrFail($id);

            // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
            $alreadyMoved = DB::table('booking_history')->where('booking_id', $booking->id)->exists();
            if ($alreadyMoved) {
                Log::info("Booking {$booking->id} already exists in history. Skipping.");
                return;
            }
            Log::info("Preparing to copy booking {$booking->id} to history");

            DB::table('booking_history')->insert([
                'booking_id' => $booking->id,
                'ref_number' => $booking->booking_id,
                'user_id' => $booking->user_id,
                'external_name' => $booking->external_name,
                'external_email' => $booking->external_email,
                'external_phone' => $booking->external_phone,
                'building_id' => $booking->building_id,
                'building_name' => $booking->building_name,
                'room_id' => $booking->room_id,
                'room_name' => $booking->room_name,
                'booking_start' => $booking->booking_start,
                'booking_end' => $booking->booking_end,
                'status_id' => $booking->status_id,
                'status_name' => $booking->status_name,
                'reason' => $booking->reason,
                'total_price' => $booking->total_price,
                'payment_status' => $booking->payment_status,
                'is_external' => $booking->is_external,
                'created_at' => now(),
                'updated_at' => now(),
                'moved_to_history_at' => now(),
            ]);

            Log::info("Booking {$booking->id} copied to history successfully.");

            // ‚ùå ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏à‡∏≤‡∏Å bookings ‡πÅ‡∏•‡πâ‡∏ß
            $booking->delete();
        } catch (\Exception $e) {
            Log::error('Failed to copy booking to history: ' . $e->getMessage());
        }
    }

    public function index(Request $request)
    {
        $user = auth()->user(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö auto-complete ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        $this->autoCompletePastBookings();

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á query
        $query = DB::table('bookings')
            ->whereNull('deleted_at')
            ->leftJoin('status', 'bookings.status_id', '=', 'status.status_id')
            ->leftJoin('users', 'bookings.user_id', '=', 'users.id')
            ->leftJoin('rooms', 'bookings.room_id', '=', 'rooms.room_id')
            ->select(
                'bookings.*',
                'status.status_name',
                'users.name as user_name',
                'rooms.room_name'
            );

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô sub-admin ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•
        if ($user->hasRole('sub-admin')) {
            $buildingIds = $user->buildings()->pluck('buildings.id')->toArray();
            $query->whereIn('bookings.building_id', $buildingIds);
        }

        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (6) ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (5)
        $query->whereNotIn('bookings.status_id', [5, 6]);

        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å booking_id, ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ user
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('bookings.booking_id', 'like', "%{$search}%")
                    ->orWhere('bookings.external_name', 'like', "%{$search}%")
                    ->orWhere('users.name', 'like', "%{$search}%")
                    ->orWhere('rooms.room_name', 'like', "%{$search}%");
            });
        }

        // üìÜ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏≠‡∏á
        if ($request->filled('booking_date')) {
            $query->whereDate('bookings.created_at', $request->booking_date);
        }

        // üìÜ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if ($request->filled('date_from')) {
            $query->whereDate('bookings.booking_start', '>=', $request->date_from);
        }

        // üìÜ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        if ($request->filled('date_to')) {
            $query->whereDate('bookings.booking_end', '<=', $request->date_to);
        }

        // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if ($request->filled('status_id')) {
            $query->where('bookings.status_id', $request->status_id);
        }

        // üîÉ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á
        $sort = $request->get('sort', 'desc');
        $query->orderBy('bookings.created_at', $sort);

        // üëâ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ bookings ‡∏û‡∏£‡πâ‡∏≠‡∏° paginate
        $bookings = $query->paginate(10)->appends($request->all());

        // üëâ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        $totalBookings = DB::table('bookings')->whereNull('deleted_at')->count();
        $pendingBookings = DB::table('bookings')->where('status_id', 3)->whereNull('deleted_at')->count(); // ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        $confirmedBookings = DB::table('bookings')->where('status_id', 4)->whereNull('deleted_at')->count(); // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß

        // üëâ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô dropdown)
        $statuses = DB::table('status')->get();

        return view('dashboard.booking_db', compact(
            'bookings',
            'totalBookings',
            'pendingBookings',
            'confirmedBookings',
            'statuses'
        ));
    }


    public function updateStatus(Request $request, $id)
    {
        $booking = Booking::findOrFail($id);
        $status = Status::findOrFail($request->status_id);

        $booking->status_id = $status->status_id;
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        $booking->approver_name = Auth::user()->name;
        $booking->save();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 6 ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ moveToHistory
        if (in_array($status->status_id, [5, 6])) {
            $this->moveToHistory($id);
            Log::info("Booking {$id} moved to history."); // ‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        }

        return redirect()->route('booking_db')->with('success', "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô {$status->status_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     */
    private function autoCompletePastBookings()
    {
        $now = Carbon::now();

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        $pastBookings = Booking::where('booking_end', '<', $now)
            ->whereNotIn('status_id', [5, 6]) // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            ->get();

        foreach ($pastBookings as $booking) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" (status_id = 6)
            $booking->status_id = 6;
            $booking->save();

            // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            $this->moveToHistory($booking->id);
        }
    }

    // public function confirmPayment(UpdateBookingPaymentRequest $request, $id)
    // {
    //     $booking = Booking::findOrFail($id);

    //     if ($request->hasFile('payment_slip')) {
    //         $booking->payment_slip = $request->file('payment_slip')->store('payment_slips', 'public');
    //     }

    //     $booking->payment_status = $request->payment_status;
    //     $booking->verified_at = now();
    //     $booking->save();

    //     return redirect()->route('booking_db')
    //         ->with('success', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    // }
}
